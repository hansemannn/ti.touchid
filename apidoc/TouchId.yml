name: Modules.TouchId
summary: Allows a Titanium application to use the iOS Touch ID authentication mechanism.
platforms: [iphone, ipad, android]
since: {iphone: "3.4.0", ipad: "3.4.0", android: "5.4.0"}
extends: Titanium.Module
description: |
    Touch ID is a security mechanism that uses a fingerprint to authenticate the user. The
    fingerprint sensor is located in the Home button of the device.  Users can use their fingerprint
    instead of entering their passcode for authentication.

    ### Requirements

    The Touch ID module is available with the Titanium SDK starting with Release 3.4.0.
    This module only works with devices running iOS 8.  You can only test the Touch ID module on a device.

    The device must have a Touch ID sensor in the Home button and Touch ID must be setup in order to use
    the Touch ID authentication mechanism.  You can set up Touch ID in iOS Setup Assistant or by
    tapping **Touch ID & Passcode** from Settings.

    For information on setting up Touch ID, see
    [iPhone 5s: Using Touch ID](http://support.apple.com/kb/HT5883).

    ### Getting Started

    Add the module as a dependency to your application by adding a **`<module>`** item to the
    **`<modules>`** element of your `tiapp.xml` file:

        <ti:app>
          ...
          <modules>
            <module platform="iphone">ti.touchid</module>
          </modules>
          ...
        </ti:app>

    Use `require()` to access the module from JavaScript:

        var TouchId = require("ti.touchid");

    The `TouchId` variable is a reference to the module. Make API calls using this reference:

        TouchId.authenticate({
            reason: "Need to modify personal settings.",
            callback: authCB
        });

    ### Sample Application

    The module contains a sample application in the
    `<TITANIUM_SDK_HOME>/modules/iphone/ti.touchid/<VERSION>/example/` folder.

methods:
  - name: authenticate
    summary: Initiates the Touch ID authentication process.
    description: |
      A special note for Android:

      When you call this method in Android, if you provide an incorrect fingerprint and receive an error
      message "Unable to recognize fingerprint", do not call authenticate. Instead, get the user to try
      again. If you call authenticate, it will end up in a bad state. This flow will be improved in the
      next update for Android.
    parameters:
      - name: params
        summary: |
            Dictionary containing two properties:

              * `reason` (String): Message displayed in the authentication dialog describing why the
                application is requesting authentication. This is for iOS only.
              * `callback` (Function): Callback function executed after the authentication
                completes. The callback function is passed a dictionary with three properties:

                  * `success` (Boolean): Set to true if authentication succeeded.
                  * `error` (String): System error message.
                  * `code` (Number): Module `ERROR_*` constant indicating the reason for the failure.
        type: Dictionary

  - name: deviceCanAuthenticate
    summary: Checks to see if device is configured for Touch ID authentication.
    description: |
        Example: 
            var TiTouchId = require("ti.touchid");
            var result = TiTouchId.deviceCanAuthenticate();
            if (!result.canAuthenticate) {
                alert('Message: ' + result.error + '\nCode: ' + result.code);  
            } else {
                alert('device can authenticate');
            }
    returns:
        type: DeviceCanAuthenticateResult

  - name: isSupported
    summary: Determines if the current device supports Touch ID.
    returns:
        type: Boolean

properties:

  - name: ERROR_AUTHENTICATION_FAILED
    summary: Constant indicating that the authentication was not successful.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_PASSCODE_NOT_SET
    summary: Constant indicating that the passcode is not set for the device.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    

  - name: ERROR_TOUCH_ID_NOT_AVAILABLE
    summary: Constant indicating that Touch ID is not available on the device.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_TOUCH_ID_NOT_ENROLLED
    summary: Constant indicating that Touch ID does not have any enrolled fingerprints.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_SYSTEM_CANCEL
    summary: |
        Constant indicating that iOS cancelled authentication, for example, if another
        application enters the foreground.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_USER_CANCEL
    summary: Constant indicating that the user canceled authentication.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_USER_FALLBACK
    summary: Constant indicating that the user tapped the fallback button to enter their passcode.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_APP_CANCELLED
    summary: Constant indicating that the app cancelled authentication.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_INVALID_CONTEXT
    summary: Constant indicating that there is an invalid context.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]

  - name: ERROR_TOUCH_ID_LOCKOUT
    summary: Constant indicating that Touch ID has locked out.
    type: Number
    permission: read-only
    platforms: [iphone, ipad]
    
---
name: DeviceCanAuthenticateResult
platforms: [android, iphone, ipad]
since: "1.0.1"
summary: Dictionary containing results for <ti.touchid.deviceCanAuthenticate>.
properties:
  - name: canAuthenticate 
    summary: Set to true if device is configured for touch ID authentication.
    type: Boolean

  - name: error
    summary: System error message if any.
    type: String

  - name: code
    summary: iOS only, Module `ERROR_*` constant indicating the reason for the failure if any.
    type: Number
